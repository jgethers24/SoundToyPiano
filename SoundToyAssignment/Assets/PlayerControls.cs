//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PianoKeys"",
            ""id"": ""5a005c16-a20a-4b6f-aa05-da35e5a3348e"",
            ""actions"": [
                {
                    ""name"": ""A Key"",
                    ""type"": ""Button"",
                    ""id"": ""551fa203-ee32-49b1-a03a-17a93f2d407a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""S Key"",
                    ""type"": ""Button"",
                    ""id"": ""3e63ba74-4282-40ec-a707-44e141861067"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""D Key"",
                    ""type"": ""Button"",
                    ""id"": ""b32ec4aa-d74a-4ae1-a916-a5650bcb98fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""F Key"",
                    ""type"": ""Button"",
                    ""id"": ""c3c31bb7-068c-4b22-a25d-512c470d0c51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""G Key"",
                    ""type"": ""Button"",
                    ""id"": ""4d9561ac-275e-4546-9c20-f9dd96eacc29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""H Key"",
                    ""type"": ""Button"",
                    ""id"": ""08603089-3726-4012-85d5-defe3fb2c055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""J Key"",
                    ""type"": ""Button"",
                    ""id"": ""cd93b4ec-68e8-451e-ac9b-43ce1e28418a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""K Key"",
                    ""type"": ""Button"",
                    ""id"": ""afed13e9-5e1e-41e3-b373-9be3fe0263dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""L Key"",
                    ""type"": ""Button"",
                    ""id"": ""9d11c046-64ce-4b35-8276-489138014d80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SemiColon Key"",
                    ""type"": ""Button"",
                    ""id"": ""ce1a5025-5458-45e5-96e2-a8c223cd5903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04a18919-f388-4b49-8f72-5280a4db80b4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""A Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d4d3d9e-5169-4d76-a4eb-8aacab3cb0cb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""S Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1de76809-9d98-4b09-8c79-9b6aa7253177"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""D Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d30a98f-5cdd-4b27-8221-2d937d3d95e1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""F Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bdce7b6-27dd-446a-9801-c6ca6e83fc69"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""G Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af3c6d75-a6a6-455e-9975-e3c2218595f1"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""H Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56b2f450-7e2a-42b8-9173-c56d2f559955"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""J Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40ba6bb6-1a3c-427c-b32b-0c9d1eb12414"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""K Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""997f43d4-8f68-4a7f-abcf-4682eab8c544"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""L Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83cb79ee-75c6-4c77-bb99-f38a010f1077"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SemiColon Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PianoKeys
        m_PianoKeys = asset.FindActionMap("PianoKeys", throwIfNotFound: true);
        m_PianoKeys_AKey = m_PianoKeys.FindAction("A Key", throwIfNotFound: true);
        m_PianoKeys_SKey = m_PianoKeys.FindAction("S Key", throwIfNotFound: true);
        m_PianoKeys_DKey = m_PianoKeys.FindAction("D Key", throwIfNotFound: true);
        m_PianoKeys_FKey = m_PianoKeys.FindAction("F Key", throwIfNotFound: true);
        m_PianoKeys_GKey = m_PianoKeys.FindAction("G Key", throwIfNotFound: true);
        m_PianoKeys_HKey = m_PianoKeys.FindAction("H Key", throwIfNotFound: true);
        m_PianoKeys_JKey = m_PianoKeys.FindAction("J Key", throwIfNotFound: true);
        m_PianoKeys_KKey = m_PianoKeys.FindAction("K Key", throwIfNotFound: true);
        m_PianoKeys_LKey = m_PianoKeys.FindAction("L Key", throwIfNotFound: true);
        m_PianoKeys_SemiColonKey = m_PianoKeys.FindAction("SemiColon Key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PianoKeys
    private readonly InputActionMap m_PianoKeys;
    private List<IPianoKeysActions> m_PianoKeysActionsCallbackInterfaces = new List<IPianoKeysActions>();
    private readonly InputAction m_PianoKeys_AKey;
    private readonly InputAction m_PianoKeys_SKey;
    private readonly InputAction m_PianoKeys_DKey;
    private readonly InputAction m_PianoKeys_FKey;
    private readonly InputAction m_PianoKeys_GKey;
    private readonly InputAction m_PianoKeys_HKey;
    private readonly InputAction m_PianoKeys_JKey;
    private readonly InputAction m_PianoKeys_KKey;
    private readonly InputAction m_PianoKeys_LKey;
    private readonly InputAction m_PianoKeys_SemiColonKey;
    public struct PianoKeysActions
    {
        private @PlayerControls m_Wrapper;
        public PianoKeysActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AKey => m_Wrapper.m_PianoKeys_AKey;
        public InputAction @SKey => m_Wrapper.m_PianoKeys_SKey;
        public InputAction @DKey => m_Wrapper.m_PianoKeys_DKey;
        public InputAction @FKey => m_Wrapper.m_PianoKeys_FKey;
        public InputAction @GKey => m_Wrapper.m_PianoKeys_GKey;
        public InputAction @HKey => m_Wrapper.m_PianoKeys_HKey;
        public InputAction @JKey => m_Wrapper.m_PianoKeys_JKey;
        public InputAction @KKey => m_Wrapper.m_PianoKeys_KKey;
        public InputAction @LKey => m_Wrapper.m_PianoKeys_LKey;
        public InputAction @SemiColonKey => m_Wrapper.m_PianoKeys_SemiColonKey;
        public InputActionMap Get() { return m_Wrapper.m_PianoKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PianoKeysActions set) { return set.Get(); }
        public void AddCallbacks(IPianoKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_PianoKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PianoKeysActionsCallbackInterfaces.Add(instance);
            @AKey.started += instance.OnAKey;
            @AKey.performed += instance.OnAKey;
            @AKey.canceled += instance.OnAKey;
            @SKey.started += instance.OnSKey;
            @SKey.performed += instance.OnSKey;
            @SKey.canceled += instance.OnSKey;
            @DKey.started += instance.OnDKey;
            @DKey.performed += instance.OnDKey;
            @DKey.canceled += instance.OnDKey;
            @FKey.started += instance.OnFKey;
            @FKey.performed += instance.OnFKey;
            @FKey.canceled += instance.OnFKey;
            @GKey.started += instance.OnGKey;
            @GKey.performed += instance.OnGKey;
            @GKey.canceled += instance.OnGKey;
            @HKey.started += instance.OnHKey;
            @HKey.performed += instance.OnHKey;
            @HKey.canceled += instance.OnHKey;
            @JKey.started += instance.OnJKey;
            @JKey.performed += instance.OnJKey;
            @JKey.canceled += instance.OnJKey;
            @KKey.started += instance.OnKKey;
            @KKey.performed += instance.OnKKey;
            @KKey.canceled += instance.OnKKey;
            @LKey.started += instance.OnLKey;
            @LKey.performed += instance.OnLKey;
            @LKey.canceled += instance.OnLKey;
            @SemiColonKey.started += instance.OnSemiColonKey;
            @SemiColonKey.performed += instance.OnSemiColonKey;
            @SemiColonKey.canceled += instance.OnSemiColonKey;
        }

        private void UnregisterCallbacks(IPianoKeysActions instance)
        {
            @AKey.started -= instance.OnAKey;
            @AKey.performed -= instance.OnAKey;
            @AKey.canceled -= instance.OnAKey;
            @SKey.started -= instance.OnSKey;
            @SKey.performed -= instance.OnSKey;
            @SKey.canceled -= instance.OnSKey;
            @DKey.started -= instance.OnDKey;
            @DKey.performed -= instance.OnDKey;
            @DKey.canceled -= instance.OnDKey;
            @FKey.started -= instance.OnFKey;
            @FKey.performed -= instance.OnFKey;
            @FKey.canceled -= instance.OnFKey;
            @GKey.started -= instance.OnGKey;
            @GKey.performed -= instance.OnGKey;
            @GKey.canceled -= instance.OnGKey;
            @HKey.started -= instance.OnHKey;
            @HKey.performed -= instance.OnHKey;
            @HKey.canceled -= instance.OnHKey;
            @JKey.started -= instance.OnJKey;
            @JKey.performed -= instance.OnJKey;
            @JKey.canceled -= instance.OnJKey;
            @KKey.started -= instance.OnKKey;
            @KKey.performed -= instance.OnKKey;
            @KKey.canceled -= instance.OnKKey;
            @LKey.started -= instance.OnLKey;
            @LKey.performed -= instance.OnLKey;
            @LKey.canceled -= instance.OnLKey;
            @SemiColonKey.started -= instance.OnSemiColonKey;
            @SemiColonKey.performed -= instance.OnSemiColonKey;
            @SemiColonKey.canceled -= instance.OnSemiColonKey;
        }

        public void RemoveCallbacks(IPianoKeysActions instance)
        {
            if (m_Wrapper.m_PianoKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPianoKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_PianoKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PianoKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PianoKeysActions @PianoKeys => new PianoKeysActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPianoKeysActions
    {
        void OnAKey(InputAction.CallbackContext context);
        void OnSKey(InputAction.CallbackContext context);
        void OnDKey(InputAction.CallbackContext context);
        void OnFKey(InputAction.CallbackContext context);
        void OnGKey(InputAction.CallbackContext context);
        void OnHKey(InputAction.CallbackContext context);
        void OnJKey(InputAction.CallbackContext context);
        void OnKKey(InputAction.CallbackContext context);
        void OnLKey(InputAction.CallbackContext context);
        void OnSemiColonKey(InputAction.CallbackContext context);
    }
}
